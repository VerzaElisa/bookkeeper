package org.apache.bookkeeper.bookie;

import org.apache.bookkeeper.common.util.Watcher;
import org.apache.bookkeeper.net.BookieId;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Field;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.stubbing.Answer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

import static java.nio.charset.StandardCharsets.UTF_8;

@RunWith(value=Parameterized.class)
public class CheckOpenTest{
    private FileInfo fi;
    private String exception;
    private File fl = new File(Variables.TEST_FOLDER+"/"+Variables.LEDGER_FILE_INDEX);
    private String magic = "BKLE";
    private String key;
    private int version;
    private int headerMKLen;
    private boolean del;
    private boolean created;
    private boolean manuallyDel;
    private int explicitLacBufLength = 16;
    private boolean fileChannel;
    private boolean dummy;
    private FileChannel fc;
    private FileChannel fc_spy;
    private File fl_spy;
    private Field fc_field;
    private String gen = "qwertyui";
    private int fileLen;
    private int keyLen;
    private int times = 0;
    private Logger LOG;
    private Logger LOG_SPY;


    @Parameters
    public static Collection<Object[]> getTestParameters(){
        return Arrays.asList(new Object[][]{
//          | exception                  | deleted  | manuallyDel | key       | created | fc     | dummy | fileLen | keyLen |
            { "FileInfoDeletedException" , true     , false       , "abcd"    , true    , false  , true  , 0       , 4      }, 
            { "IOException"              , false    , true        , null      , true    , false  , true  , 0       , 0      }, 
            { null                       , false    , true        , "abcd"    , true    , false  , true  , 1024    , 4      }, 
            { null                       , false    , true        , "abcd"    , false   , false  , true  , 0       , 4      }, 
            { "IOException"              , false    , false       , null      , true    , false  , true  , 40      , 41     }, //New
            { null                       , false    , false       , "abcd"    , true    , false  , true  , 1024    , 41     }, //New
            { "IOException"              , false    , false       , null      , true    , false  , true  , 40      , 0      }, 
            { null                       , false    , true        , "abcd"    , true    , true   , true  , 0       , 4      }, 
            { null                       , false    , false       , "abcd"    , true    , false  , false , 40      , 4      }, 

        });
    }

    public CheckOpenTest(String exception, boolean del, boolean manuallyDel, String key, boolean created, boolean fileChannel, boolean dummy, int fileLen, int keyLen){
        this.exception = exception;
        this.key = key;
        this.created = created;
        this.del = del;
        this.manuallyDel = manuallyDel;
        this.fileChannel = fileChannel;
        this.dummy = dummy;
        this.fileLen = fileLen;
        this.keyLen = keyLen;
    }

    /*Nel setup viene creato l'oggetto FileInfo.*/
    @Before
    public void setUp() throws Exception {
        Utilities.createDirectory(Variables.TEST_FOLDER);
        byte[] mk = null;
        if(key != null){
            mk = key.getBytes();
        }
        int ver = Variables.VERSION;
        //Inserimento logger spy
        LOG = LoggerFactory.getLogger(FileInfo.class);
        LOG_SPY = spy(LOG);
        Utilities.setFinalStatic(FileInfo.class.getDeclaredField("LOG"), LOG_SPY);

        fi = new FileInfo(fl, mk, ver);
        //Viene creato il FileChannel
        if(fileChannel){
            fc = new RandomAccessFile(fl, "rw").getChannel();
            fc_field = Utilities.setPrivate(fi, fc, "fc");
        }
        //Si effettua la spy del file
        fl_spy = spy(fl);
        if(!dummy){
            Mockito.when(fl_spy.exists()).thenReturn(false);
            Utilities.createFile(fl, key, magic, ver, keyLen, gen.length(), 0, gen.getBytes());
        }
        Utilities.setPrivate(fi, fl_spy, "lf");
        if(del){
            Field closedField = fi.getClass().getDeclaredField("deleted");
            closedField.setAccessible(true);
            closedField.set(fi, true);
        }else if(!manuallyDel){
            //Popolo il file per i test
            ByteBuffer lac = Utilities.bbCreator(0L, 100L, Math.abs(explicitLacBufLength)).nioBuffer();
            lac.rewind();
            byte[] lac_byte = new byte[lac.remaining()];
            lac.get(lac_byte);
            lac.rewind();
            Utilities.createFile(fl, "abcd", "BKLE", 1, keyLen, explicitLacBufLength, 0, lac_byte);
            if(keyLen == 41){
                times = 1;
            }
        }
    }
    @After
    public void onClose(){
        File parent = new File(Variables.TEST_FOLDER); 
        Utilities.deleteDirectory(parent);
    }
    
    @Test
    public void readHeaderTest() throws IOException, IllegalArgumentException, IllegalAccessException{
        try{
            fi.checkOpen(created);
            if(fileChannel){
                verify(fl_spy, times(0)).exists();
            }
            verify(LOG_SPY, times(times)).warn("Attempting to write header of {} again.", fl);
            Assert.assertEquals(fileLen, fl.length());
            assertEquals(created, Files.exists(Paths.get("testsFiles/lfi")));
        }catch(Exception e){    
            Assert.assertEquals(exception, e.getClass().getSimpleName());
        }
    }

}