package org.apache.bookkeeper.bookie;

import org.apache.bookkeeper.common.util.Watcher;
import org.apache.bookkeeper.net.BookieId;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Field;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.stubbing.Answer;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

import static java.nio.charset.StandardCharsets.UTF_8;

@RunWith(value=Parameterized.class)
public class CheckOpenTest{
    private FileInfo fi;
    private String exception;
    private File fl = new File(Variables.LEDGER_FILE_INDEX);
    private String magic;
    private String key;
    private int version;
    private int headerMKLen;
    private boolean del;
    private boolean created;
    private boolean manuallyDel;

    @Parameters
    public static Collection<Object[]> getTestParameters(){
        return Arrays.asList(new Object[][]{
//          | exception                  | deleted  | manuallyDel | key       | created |
            { "FileInfoDeletedException" , true     , false       , "abcd"    , true    }, 
            { "IOException"              , false    , true        , null      , true    }, 
//             { null                       , false    , true        , "abcd"    , true    }, 
            { null                       , false    , true        , "abcd"    , false   }, 
            { "IOException"              , false    , false       , null      , true    }, 
            { null                       , false    , false       , "abcd"    , true    }, 
        });
    }

    public CheckOpenTest(String exception, boolean del, boolean manuallyDel, String key, boolean created){
        this.exception = exception;
        this.key = key;
        this.created = created;
        this.del = del;
        this.manuallyDel = manuallyDel;
    }

    /*Nel setup viene creato l'oggetto FileInfo.*/
    @Before
    public void setUp() throws IOException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        byte[] mk = null;
        if(key != null){
            mk = key.getBytes();
        }
        int ver = Variables.VERSION;
        fi = new FileInfo(fl, mk, ver);
        if(del){
            Field closedField = fi.getClass().getDeclaredField("deleted");
            closedField.setAccessible(true);
            closedField.set(fi, true);
        }else if(!manuallyDel){
            //Popolo il file per i test
            Utilities.createFile(fl, "abcd", "BKLE", 1, 4, 24);
        }
    }
    @After
    public void onClose(){
        File myObj = new File(Variables.LEDGER_FILE_INDEX); 
        myObj.delete();
    }
    @Test
    public void readHeaderTest(){
        try{
            fi.checkOpen(created);
            assertEquals(created, Files.exists(Paths.get("./lfi")));
        }catch(Exception e){    
            Assert.assertEquals(exception, e.getClass().getSimpleName());
        }
    }

}